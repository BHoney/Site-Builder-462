using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System.IO;

public class WallPoints : MonoBehaviour {



//	adds wall WallPoints into a  list from image and returns the list
	public List<Vector3> getWallPoints(int[,] image){
		List<Vector3> wallPoints = new List<Vector3>();
		//i: number of rows
		for (int i = 0; i <= image.GetLength(0)-1; ++i) {
//			print ("rows " + image.GetLength (0) );
			// j: number of cols
			for (int j = 0; j <= image.GetLength(1)-1; ++j) {
//				print ("col " + image.GetLength (1) );
				// if the it is a black pixel(0) add it to the Vector3 array
				if(image[i,j] == 0){


					wallPoints.Add(new Vector3 (j,20,i));

				}  
				// else {
				// 	image[i,j] = 1;
				// }

			}
		}

		return wallPoints;
	}

//	prints all WallPoints
	public void printList(List<Vector3> wallPoints){

		//		print each point for each point int the List wallpoint
		foreach(Vector3 point in wallPoints)
		{
			print (point.ToString());
		}

	}
	public void printList1(List<Color> wallPoints){

		//		print each point for each point int the List wallpoint
		foreach(Color point in wallPoints)
		{
			print (point.ToString());
		}

	}

	public int[,] xIMG(int [,] image){
		//every column in the array

		for (int i = 0; i <=  image.GetLength (0) - 1; ++i) {
			// every row in the array

			for (int j = 0; j <= image.GetLength (1) - 2; ++j) {
				//				if(i == image.GetLength (0) - 1){
				//				print("yyyy");


				if (image [i,j] == 0 && image[i,j+1] == 0 ) {
//					print ("len " + xLength (image, i, j));
					image [i,j] = 0;
				} else {
					image [i,j] = 1;
				}
				//				}

			}
		}
		for (int j = 0; j <= image.GetLength(0)-1; ++j) {
			if (image [j,image.GetLength(1) - 1] == 0 && image[j,image.GetLength(1) - 2] == 0) {
				image [j,image.GetLength(1) - 1] = 0;
			}
			else{
				image [j,image.GetLength(1) - 1] = 1;
			}
		}
		return image;
	}
		

	//	returns an image containing only the y points(more than 0 neighbors? more than 1 neighbor)
	public int[,] yIMG(int [,] image){
		//every column in the array

		for (int i = 0; i <= image.GetLength (0) - 2; ++i) {
			// every row in the array

			for (int j = 0; j <= image.GetLength (1) - 1; ++j) {
				

				if (image [i, j] == 0 && image[i+1,j] == 0) {
					
					image [i, j] = 0;
				} else {
					image [i, j] = 1;
				}

			}
		}
		for (int j = 0; j <= image.GetLength (1)-1; ++j) {
			if (image [image.GetLength (0) - 1,j] == 0 && image[image.GetLength (0) - 2,j] == 0) {
				image [image.GetLength (0) - 1,j] = 0;
			}
			else{
				image [image.GetLength (0) - 1,j] = 1;
			}
		}
		return image;
	}


	//	returns the amount of continuous wall pixels int the x direction(length) starting from given row and col
	public static int xLength(int[,] image,int row,int col){
		int xCount = 0;

		for (int j = col; j <= image.GetLength(1)-1 ; ++j) {
			print ("j :" + j);
			print( "col len " + image.GetLength(1));
			if(j == image.GetLength(1) -1  && image[row,j] ==0 ){
				print ("max len " + (image.GetLength(1) -2));
				xCount++;
				print ("first return ");
				return xCount;
			}

			if(image[row,j] == 0 && image[row,j+1] == 0 ){
				print ("second return ");
				xCount++;
			}

		}
		if (image [row, col] == 0) {
			xCount++;
		}

		return xCount;
	}
//	//	returns an image containing only the x points(more than 0 neighbors? more than 1 neighbor)
//	public int[,] xIMG(int [,] image){
//	}


	//returns the length of the wall in the x direction
	public static int xLen(int[,] image,int row,int col){
		int j =col;
		int count = 0;
		while(image[row,j] == 0 && j != image.GetLength(1) -1){
			j++;
			count++;

		}
		if(j == image.GetLength(1) -1 && image[row,j] ==0){
			count++;
		}

		return count;

	}




	public void drawX(int[,]image){
		int hi = 20;
		for (int i = 0; i <=  image.GetLength (0) - 1; ++i) {

			for (int j = 0; j <= image.GetLength (1) - 2; ++j) {

//				if 0 create a cube 
				if (image [i,j] == 0  ) {
					GameObject xcube = GameObject.CreatePrimitive(PrimitiveType.Cube);
					xcube.GetComponent<Renderer>().material.color = Color.blue;
				
					int start = j; // start at col j
					int length = xLen (image,i,j); // get len in x direction(xwall) of given point(first 0 in x direction)
					int end = length + start - 1; //end point of xwall
					float midPoint = (float)(start + end) / 2;//get mid point for instant. cube

					// x = length-1 (wall len -1 bc scale starts at 1)
					xcube.transform.localScale += new Vector3 (length-1,hi,0);

					// get rid of remaining wall to avoid drawing cube for each 0 point
					for(int k =0; k < length; k++){
						image [i, j + k] = 1;
					}
					//create cube at midpoint for x bc cube scales both ways, some for y, z = row(i)
					Instantiate(xcube,new Vector3(midPoint,hi/2,i) , Quaternion.identity);
					Destroy (xcube);
				} 


			}
		}
	}

	public static Texture2D LoadPNG(string filePath) {

		Texture2D tex = null;// initiate texture
		byte[] fileData;

		Debug.Log ("loading.... " + filePath);
		if (File.Exists(filePath)) //if the file exists..    
		{
			Debug.Log ("file exists ");
			fileData = File.ReadAllBytes(filePath);//reads all the byes in the file
			tex = new Texture2D(2, 2);//creates in temperary texture
			tex.LoadImage(fileData); //..this will auto-resize the texture dimensions.
		}
		return tex;
	}
//	public GameObject bube ;
	// Use this for initialization
	void Start () {
//		GameObject bube = new GameObject("bube") ;

		GameObject bube = GameObject.Find("bube");
//		print ("cccc " + bube.name);


//		Create a Cube in the scene
//		GameObject bube = GameObject.CreatePrimitive(PrimitiveType.Cube);

//		change the color of the cube
//		bube.GetComponent<Renderer>().material.color = Color.red;


//		Shader brick1 = Shader.Find("Industrial_stone_Brick_1");
//		bube.GetComponent<Renderer>().material.shader = brick1 ;
		 
//		bube.GetComponent<Renderer>().material = new Material(Shader.Find("Industrial_stone_Brick"));

//		Texture2D brick = LoadPNG("/Users/angelrodriguez/Desktop/brick.jpeg");

//		bube.GetComponent<Renderer>().material.mainTexture=brick; 
		int hi = 10;
		//		change the scale of the cube + z(height)
		bube.transform.localScale += new Vector3 (0, hi,0 );
		Texture2D b = LoadPNG("/Users/angelrodriguez/Downloads/House_2.png");
		
			int[,] image1 = {	
				{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1, 1, 1, 0, 0, 0 ,0 ,0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	
			} ;


		int[,] image2 = {	
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1},
			{ 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1},
			{ 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0},
			{ 1, 1, 1, 1, 0, 0, 0 ,0 ,0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},

		} ;

		int[,] image3 = {	
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0},
			{ 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 1, 1, 1, 0, 0, 0, 0 ,0 ,0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 1, 1 ,0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 1, 1 ,0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
			{ 1, 1 ,0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{ 1, 1 ,1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
			{ 1, 1 ,1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},

		} ;

				int[,] image4 = {	
					{ 0, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
					{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0},
					{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0},
					{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0},
					{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0},
					{ 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0},
					{ 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0},
					{ 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
					{ 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
					{ 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
					{ 0, 1, 1, 0, 0, 0, 0 ,0 ,0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0},
					{ 0, 1 ,0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
					{ 0, 1 ,0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0},
					{ 0, 1 ,0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0},
					{ 0, 1 ,1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0},
					{ 0, 0 ,0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0},
					{ 0, 1 ,1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0},
					{ 0, 1 ,0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
					{ 0, 1 ,1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
					{ 0, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		
				} ;

		int[,] image5 = {	
			{ 0, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1, 1, 1, 1, 1, 1 , 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{ 0, 0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		} ;

		int[,] imagey = {	
			{ 0, 0 ,1, 0, 1, 1},
			{ 0, 0 ,1, 0, 1, 1},
			{ 0, 0 ,1, 0, 1, 1},
			{ 0, 0 ,1, 0, 1, 1},

		} ;

		int[,] imagex = {	
			{ 0, 0 ,0, 0, 0, 0},
			{ 0, 1 ,1, 0, 0, 1},
			{ 1, 1 ,1, 1, 1, 1},
			{ 0, 0 ,1, 0, 0, 0},

		} ;

		int[,] xwall = {
			{ 1,1,0,0,0,0,1,1},	
			{ 0,0,0,0,0,0,0,0},
		} ;
//		 Rect sourceRect;
		Texture2D h = LoadPNG("/Users/angelrodriguez/Desktop/bp1.jpg");

//		int width = Mathf.FloorToInt(h.width);
//		int height = Mathf.FloorToInt(h.height);
//
//		Color[] pix = h.GetPixels(0, 0, width, height);
//		var cl = pix.ToList();
//
//		printList1 (cl);
//		h.SetPixels(pix);
//		h.Apply();
//		GetComponent<Renderer>().material.mainTexture = h;

//		int[,] house = {
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111},
//			{1111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111101111111},
//			{1111111110111111111111111111111111111111111111110111111011111111111111111111111111111111111101111111},
//			{1111111110000000000001111111000000000000000000000111111000000000000000111111111000000000000001111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110000001111110000000000000000000000000000000000000000001111111100000000000000001111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000001111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
//			{1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111},
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111110111100111111111111111111111111111111111111111111111111111111111111111111111111111101111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
////		1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
//		}

			List<Vector3> points = getWallPoints(image4);


//		print ("len " + xLen (imagex, 3, 0));

//			   printList(points); //for testing

//		draw a Cube for each point
//				foreach(Vector3 point in points)
//				{
//			Instantiate(bube, point, Quaternion.identity);
//				}

//		xwall [0, 2];
		int len = xLen (imagex, 3,3);
		print (len);

//		GameObject xcube = GameObject.CreatePrimitive(PrimitiveType.Cube);


		//		scale the cube in the x direction. len -1 bc scale starts at 1
//		xcube.transform.localScale += new Vector3 (len-1, hi,0 );
//		int start = 2;
//		int end = len + start-1;
//
//		int x = (start + end) / 2;
//		print (x);
//		xcube.GetComponent<Renderer>().material.color = Color.blue;
//		Instantiate(xcube,new Vector3(x,0,0) , Quaternion.identity);


		drawX (imagex);

//		for (int i = 0; i <=  imagex.GetLength (0) - 1; ++i) {
//
//			for (int j = 0; j <= imagex.GetLength (1) - 2; ++j) {
//
//				if (imagex [i,j] == 0  ) {
//					GameObject xcube = GameObject.CreatePrimitive(PrimitiveType.Cube);
//					xcube.GetComponent<Renderer>().material.color = Color.blue;
//					int s = j;
//					int l = xLen (imagex,i,j);
//					int e = l + s - 1;
//					float p = (float)(s + e) / 2;
//
//					print ("p " + p);
//
//					xcube.transform.localScale += new Vector3 (l-1,hi,0);
//
//					for(int k =0; k < l; k++){
//						imagex [i, j + k] = 1;
//					}
//					Instantiate(xcube,new Vector3(p,hi/2,i) , Quaternion.identity);
//					Destroy (xcube);
//				} 
////				else {
////					imagex [i,j] = 1;
////				}
//
//
//			}
//		}

//		get rid of the original cube drawn
//		bube.SetActive(false); //only hides the cube
			Destroy(bube);
//		Destroy (xcube);

//		bube.transform.Rotate (0,0,-200);
	}



}
